cells='         '
def draw(cells):

        x=1
        j=0
        print('---------')
        while x <= 3:
            print('|', end = ' ')
            for i in range(j,j+3):
                print(cells[i], end = ' ')
            j=i+1
            print('|')
            x += 1
        print('---------')
def index(coords):
    global cells
    possibilities=['1 1','1 2','1 3','2 1','2 2','2 3','3 1','3 2','3 3']
    return possibilities.index(coords)
def input_coordinates():
    line , column = input().split()
    coordinates = line+' '+ column
    return coordinates

def make_move():
    repeat = 1
    global strategy
    global cells
    global isiterable
    while repeat == 1:
        coords = input_coordinates()
        if (coords[0] in ['1','2','3'] and coords[2] in ['1','2','3']) ==True:
           repeat=0
           if cells[index(coords)] == ' ':
                cells=cells[:index(coords)] + strategy  + cells[index(coords)+1:]
                return cells
           else:
                repeat = 1
                print("This cell is occupied! Choose another one!")
        else:

            print('Coordinates should be from 1 to 3!')
    else:
        print("You should enter numbers!")
draw(cells)
i=0
strategy=0
x=''
def check_rows(cells):
    winners = []
    row_1 = cells[0] == cells[1] == cells[2] != ' '
    row_2 = cells[3] == cells[4] == cells[5] != ' '
    row_3 = cells[6] == cells[7] == cells[8] != ' '
    if row_1:
        winners.append(cells[0])
    if row_2:
        winners.append(cells[3])
    if row_3:
        winners.append(cells[6])
    return winners
def check_columns(cells):
    winners = []
    column_1 = cells[0] == cells[3] == cells[6] != ' '
    column_2 = cells[1] == cells[4] == cells[7] != ' '
    column_3 = cells[2] == cells[5] == cells[8] != ' '
    if column_1:
        winners.append(cells[0])
    if column_2:
        winners.append(cells[1])
    if column_3:
        winners.append(cells[2])
    return winners
def check_diagonals(cells):
    winners = []
    diagonal_1 = cells[0] == cells[4] == cells[8] != ' '
    diagonal_2 = cells[2] == cells[4] == cells[6] != ' '
    if diagonal_1:
        winners.append(cells[0])
    if diagonal_2:
        winners.append(cells[2])
    return winners
for i in range(0,9):
    if i % 2 != 1:
        strategy='X'
    else:
        strategy='O'
    make_move()
    draw(cells)
    if (len(check_rows(cells)) > 1 or len(check_columns(cells)) > 1 or len(check_diagonals(cells)) > 1):
        print("Impossible")
        break
    elif abs(cells.count('X') - cells.count('O')) >= 2:
        print("Impossible")
        break
    elif len(check_rows(cells)) == len(check_columns(cells)) == len(check_diagonals(cells)) == 0 and cells.count(
            ' ') == 0:
        print("Draw")
        break
    elif check_rows(cells):
        print(check_rows(cells)[0] + ' wins')
        break
    elif check_columns(cells):
        print(check_columns(cells)[0] + ' wins')
        break
    elif check_diagonals(cells):
        print(check_diagonals(cells)[0] + ' wins')
        break



